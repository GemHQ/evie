// Generated by CoffeeScript 1.9.1
(function() {
  var Emitter, PatternSet, assert, first, is_function, is_object, is_string, map, ref,
    slice = [].slice;

  ref = require("fairmont"), is_string = ref.is_string, is_object = ref.is_object, is_function = ref.is_function, first = ref.first;

  PatternSet = require("evie-wildcards");

  assert = function(x) {
    if (!x) {
      throw new TypeError;
    }
  };

  map = function(fn) {
    return function() {
      var args, event, x;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (args.length === 1 && is_object(first(args))) {
        map = args[0];
        for (event in map) {
          x = map[event];
          fn.call(this, event, x);
        }
      } else {
        fn.call.apply(fn, [this].concat(slice.call(args)));
      }
      return this;
    };
  };

  Emitter = (function() {
    function Emitter(target) {
      this.handlers = {};
      this.patterns = new PatternSet;
      if (target != null) {
        this.forward({
          "*": target
        });
      }
    }

    Emitter.prototype.emit = map(function() {
      var args, event;
      event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      assert(is_string(event));
      return this.patterns.match(event, (function(_this) {
        return function(event) {
          var base, handler, handlers, i, len, results;
          handlers = ((base = _this.handlers)[event] != null ? base[event] : base[event] = []);
          results = [];
          for (i = 0, len = handlers.length; i < len; i++) {
            handler = handlers[i];
            results.push(handler.apply(null, args));
          }
          return results;
        };
      })(this));
    });

    Emitter.prototype.on = map(function(event, handler) {
      var base, handlers;
      assert(is_string(event));
      assert(is_function(handler));
      this.patterns.add(event);
      handlers = ((base = this.handlers)[event] != null ? base[event] : base[event] = []);
      return handlers.push(handler);
    });

    Emitter.prototype.once = map(function(event, handler) {
      assert(is_string(event));
      assert(is_function(handler));
      return this.on(event, (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          handler.apply(null, args);
          return _this.remove(event, handler);
        };
      })(this));
    });

    Emitter.prototype.remove = map(function(event, handler) {
      var _h, base, handlers;
      assert(is_string(event));
      assert(is_function(handler));
      handlers = ((base = this.handlers)[event] != null ? base[event] : base[event] = []);
      return this.handlers[event] = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = handlers.length; i < len; i++) {
          _h = handlers[i];
          if (_h !== handler) {
            results.push(_h);
          }
        }
        return results;
      })();
    });

    Emitter.prototype.forward = map(function(event, emitter) {
      var emit;
      assert(is_string(event));
      assert(emitter.emit != null);
      emit = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return emitter.emit.apply(emitter, [event].concat(slice.call(args)));
      };
      return this.on(event, emit);
    });

    Emitter.create = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Emitter, args, function(){});
    };

    return Emitter;

  })();

  module.exports = Emitter;

}).call(this);
